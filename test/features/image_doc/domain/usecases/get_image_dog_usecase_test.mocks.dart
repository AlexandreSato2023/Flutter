// Mocks generated by Mockito 5.3.2 from annotations
// in examplearch/test/features/image_doc/domain/usecases/get_image_dog_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i5;
import 'package:examplearch/core/errors/error_base.dart' as _i9;
import 'package:examplearch/features/image_dog/data/datasources/image_dog_datasource.dart'
    as _i4;
import 'package:examplearch/features/image_dog/data/datasources/image_dog_datasource_impl.dart'
    as _i6;
import 'package:examplearch/features/image_dog/data/models/dog_dto.dart' as _i3;
import 'package:examplearch/features/image_dog/data/repositories/image_dog_repository_impl.dart'
    as _i8;
import 'package:examplearch/features/image_dog/domain/entities/dog.dart'
    as _i10;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDogDTO_1 extends _i1.SmartFake implements _i3.DogDTO {
  _FakeDogDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageDogDataSource_2 extends _i1.SmartFake
    implements _i4.ImageDogDataSource {
  _FakeImageDogDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageDogDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageDogDataSourceImpl extends _i1.Mock
    implements _i6.ImageDogDataSourceImpl {
  MockImageDogDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  _i7.Future<_i3.DogDTO> getImageDog() => (super.noSuchMethod(
        Invocation.method(
          #getImageDog,
          [],
        ),
        returnValue: _i7.Future<_i3.DogDTO>.value(_FakeDogDTO_1(
          this,
          Invocation.method(
            #getImageDog,
            [],
          ),
        )),
      ) as _i7.Future<_i3.DogDTO>);
}

/// A class which mocks [ImageDogRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageDogRepositoryImpl extends _i1.Mock
    implements _i8.ImageDogRepositoryImpl {
  MockImageDogRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ImageDogDataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeImageDogDataSource_2(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i4.ImageDogDataSource);
  @override
  _i7.Future<_i5.Either<_i9.ErrorBase, _i10.Dog>> getImageDog() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImageDog,
          [],
        ),
        returnValue: _i7.Future<_i5.Either<_i9.ErrorBase, _i10.Dog>>.value(
            _FakeEither_3<_i9.ErrorBase, _i10.Dog>(
          this,
          Invocation.method(
            #getImageDog,
            [],
          ),
        )),
      ) as _i7.Future<_i5.Either<_i9.ErrorBase, _i10.Dog>>);
}
